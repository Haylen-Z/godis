// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/protocol.go

// Package pkg is a generated GoMock package.
package pkg

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProtocol is a mock of Protocol interface.
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol.
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance.
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return m.recorder
}

// GetNextMsgType mocks base method.
func (m *MockProtocol) GetNextMsgType(ctx context.Context) (MsgType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextMsgType", ctx)
	ret0, _ := ret[0].(MsgType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextMsgType indicates an expected call of GetNextMsgType.
func (mr *MockProtocolMockRecorder) GetNextMsgType(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextMsgType", reflect.TypeOf((*MockProtocol)(nil).GetNextMsgType), ctx)
}

// ReadArray mocks base method.
func (m *MockProtocol) ReadArray(ctx context.Context) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadArray", ctx)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadArray indicates an expected call of ReadArray.
func (mr *MockProtocolMockRecorder) ReadArray(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadArray", reflect.TypeOf((*MockProtocol)(nil).ReadArray), ctx)
}

// ReadBulkString mocks base method.
func (m *MockProtocol) ReadBulkString(ctx context.Context) (*[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBulkString", ctx)
	ret0, _ := ret[0].(*[]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBulkString indicates an expected call of ReadBulkString.
func (mr *MockProtocolMockRecorder) ReadBulkString(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBulkString", reflect.TypeOf((*MockProtocol)(nil).ReadBulkString), ctx)
}

// ReadError mocks base method.
func (m *MockProtocol) ReadError(ctx context.Context) (Error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadError", ctx)
	ret0, _ := ret[0].(Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadError indicates an expected call of ReadError.
func (mr *MockProtocolMockRecorder) ReadError(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadError", reflect.TypeOf((*MockProtocol)(nil).ReadError), ctx)
}

// ReadInteger mocks base method.
func (m *MockProtocol) ReadInteger(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInteger", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInteger indicates an expected call of ReadInteger.
func (mr *MockProtocolMockRecorder) ReadInteger(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInteger", reflect.TypeOf((*MockProtocol)(nil).ReadInteger), ctx)
}

// ReadNull mocks base method.
func (m *MockProtocol) ReadNull(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNull", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadNull indicates an expected call of ReadNull.
func (mr *MockProtocolMockRecorder) ReadNull(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNull", reflect.TypeOf((*MockProtocol)(nil).ReadNull), ctx)
}

// ReadSimpleString mocks base method.
func (m *MockProtocol) ReadSimpleString(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSimpleString", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSimpleString indicates an expected call of ReadSimpleString.
func (mr *MockProtocolMockRecorder) ReadSimpleString(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSimpleString", reflect.TypeOf((*MockProtocol)(nil).ReadSimpleString), ctx)
}

// WriteBulkString mocks base method.
func (m *MockProtocol) WriteBulkString(ctx context.Context, bs []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBulkString", ctx, bs)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBulkString indicates an expected call of WriteBulkString.
func (mr *MockProtocolMockRecorder) WriteBulkString(ctx, bs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBulkString", reflect.TypeOf((*MockProtocol)(nil).WriteBulkString), ctx, bs)
}

// WriteBulkStringArray mocks base method.
func (m *MockProtocol) WriteBulkStringArray(ctx context.Context, bss [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBulkStringArray", ctx, bss)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBulkStringArray indicates an expected call of WriteBulkStringArray.
func (mr *MockProtocolMockRecorder) WriteBulkStringArray(ctx, bss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBulkStringArray", reflect.TypeOf((*MockProtocol)(nil).WriteBulkStringArray), ctx, bss)
}
