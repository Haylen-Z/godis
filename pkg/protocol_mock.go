// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/protocol.go

// Package pkg is a generated GoMock package.
package pkg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProtocol is a mock of Protocol interface.
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol.
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance.
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return m.recorder
}

// GetNextMsgType mocks base method.
func (m *MockProtocol) GetNextMsgType() (MsgType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextMsgType")
	ret0, _ := ret[0].(MsgType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextMsgType indicates an expected call of GetNextMsgType.
func (mr *MockProtocolMockRecorder) GetNextMsgType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextMsgType", reflect.TypeOf((*MockProtocol)(nil).GetNextMsgType))
}

// ReadBulkString mocks base method.
func (m *MockProtocol) ReadBulkString() (*[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBulkString")
	ret0, _ := ret[0].(*[]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBulkString indicates an expected call of ReadBulkString.
func (mr *MockProtocolMockRecorder) ReadBulkString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBulkString", reflect.TypeOf((*MockProtocol)(nil).ReadBulkString))
}

// ReadError mocks base method.
func (m *MockProtocol) ReadError() (Error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadError")
	ret0, _ := ret[0].(Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadError indicates an expected call of ReadError.
func (mr *MockProtocolMockRecorder) ReadError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadError", reflect.TypeOf((*MockProtocol)(nil).ReadError))
}

// ReadSimpleString mocks base method.
func (m *MockProtocol) ReadSimpleString() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSimpleString")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSimpleString indicates an expected call of ReadSimpleString.
func (mr *MockProtocolMockRecorder) ReadSimpleString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSimpleString", reflect.TypeOf((*MockProtocol)(nil).ReadSimpleString))
}

// WriteBulkString mocks base method.
func (m *MockProtocol) WriteBulkString(bs []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBulkString", bs)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBulkString indicates an expected call of WriteBulkString.
func (mr *MockProtocolMockRecorder) WriteBulkString(bs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBulkString", reflect.TypeOf((*MockProtocol)(nil).WriteBulkString), bs)
}

// WriteBulkStringArray mocks base method.
func (m *MockProtocol) WriteBulkStringArray(bss [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBulkStringArray", bss)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBulkStringArray indicates an expected call of WriteBulkStringArray.
func (mr *MockProtocolMockRecorder) WriteBulkStringArray(bss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBulkStringArray", reflect.TypeOf((*MockProtocol)(nil).WriteBulkStringArray), bss)
}
